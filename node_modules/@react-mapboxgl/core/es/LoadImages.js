import _fromPairs from 'lodash/fromPairs';
import _map from 'lodash/map';
import _isEqual from 'lodash/isEqual';
import _omit from 'lodash/omit';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';

import { Children, Image } from './';

var LoadImages = (_temp = _class = function (_React$PureComponent) {
  _inherits(LoadImages, _React$PureComponent);

  function LoadImages() {
    _classCallCheck(this, LoadImages);

    var _this = _possibleConstructorReturn(this, _React$PureComponent.call(this));

    _this.state = {
      loaded: false,
      images: {}
    };

    _this.loadImage = _this.loadImage.bind(_this);
    return _this;
  }

  LoadImages.prototype.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.loadImages(_omit(this.props, 'children'));
  };

  LoadImages.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!_isEqual(_omit(this.props, 'children'), _omit(nextProps, 'children'))) {
      this.loadImages(_omit(this.props, 'children'));
    }
  };

  LoadImages.prototype.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };

  LoadImages.prototype.loadImages = function loadImages(images) {
    var _this2 = this;

    this.setState({ loaded: false });
    Promise.all(_map(images, this.loadImage)).then(function (results) {
      if (_this2.mounted) {
        _this2.setState({
          loaded: true,
          images: _fromPairs(results)
        });
      }
    });
  };

  LoadImages.prototype.loadImage = function loadImage(src, name) {
    var map = this.context.map;

    return new Promise(function (resolve, reject) {
      map.loadImage(src, function (err, image) {
        if (err) return reject(err);
        resolve([name, image]);
      });
    });
  };

  LoadImages.prototype.render = function render() {
    return React.createElement(
      Children,
      null,
      _map(this.state.images, function (image, name) {
        return React.createElement(Image, { key: name, name: name, image: image });
      }),
      this.state.loaded ? this.props.children : null
    );
  };

  return LoadImages;
}(React.PureComponent), _class.propTypes = {
  children: React.PropTypes.node
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default LoadImages;