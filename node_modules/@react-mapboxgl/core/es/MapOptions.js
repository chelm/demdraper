import _isEqual from 'lodash/isEqual';
import _keys from 'lodash/keys';
import _pick from 'lodash/pick';
import _omit from 'lodash/omit';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
var MapOptions = (_temp = _class = function (_React$PureComponent) {
  _inherits(MapOptions, _React$PureComponent);

  function MapOptions() {
    _classCallCheck(this, MapOptions);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  // Called when the map is initally created.
  MapOptions.getOptions = function getOptions(props) {
    return _omit(_pick(props, _keys(MapOptions.propTypes)), ['showTileBoundaries', 'showCollisionBoxes', 'repaint', 'rtlTextPlugin']);
  };

  MapOptions.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;

    if (!_isEqual(this.props.style, nextProps.style)) {
      map.setStyle(nextProps.style);
    }
    if (this.props.showTileBoundaries !== nextProps.showTileBoundaries) {
      map.showTileBoundaries(nextProps.showTileBoundaries);
    }
    if (this.props.showCollisionBoxes !== nextProps.showCollisionBoxes) {
      map.showCollisionBoxes(nextProps.showCollisionBoxes);
    }
    if (this.props.repaint !== nextProps.repaint) {
      map.repaint(nextProps.repaint);
    }
    if (this.props.rtlTextPlugin !== nextProps.rtlTextPlugin) {
      map.setRTLTextPlugin(nextProps.rtlTextPlugin);
    }
  };

  MapOptions.prototype.render = function render() {
    return null;
  };

  return MapOptions;
}(React.PureComponent), _class.propTypes = {
  style: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,
  hash: PropTypes.bool,
  bearingSnap: PropTypes.number,
  attributionControl: PropTypes.bool,
  logoPosition: PropTypes.string,
  preserveDrawingBuffer: PropTypes.bool,
  refreshExpiredTiles: PropTypes.bool,
  trackResize: PropTypes.bool,
  renderWorldCopies: PropTypes.bool,

  // Not options, set with a method.
  showTileBoundaries: PropTypes.bool,
  showCollisionBoxes: PropTypes.bool,
  repaint: PropTypes.bool,
  rtlTextPlugin: PropTypes.string
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default MapOptions;