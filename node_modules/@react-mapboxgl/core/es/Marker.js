import _extend from 'lodash/extend';
import _isEqual from 'lodash/isEqual';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import ReactDOM from 'react-dom';
import PropTypes from 'prop-types';
var Marker = (_temp = _class = function (_React$Component) {
  _inherits(Marker, _React$Component);

  function Marker() {
    _classCallCheck(this, Marker);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Marker.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !_isEqual(this.props, nextProps) || !_isEqual(this.state, nextState);
  };

  Marker.prototype.componentDidMount = function componentDidMount() {
    // Setup marker div.
    this.el = document.createElement('div');
    this.el.className = 'react-mapbox--marker';
    _extend(this.el.style, {
      position: 'relative',
      width: 0,
      height: 0,
      overflow: 'visible'
    });

    // Render children.
    this.renderChildren(this.props);

    // Add marker to map.
    this.addMarker(this.props);
  };

  Marker.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.component) {
      ReactDOM.unmountComponentAtNode(this.el);
      this.component = null;
    }
    this.marker.remove();
    this.el = null;
  };

  Marker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!_isEqual(this.props.coordinates, nextProps.coordinates)) {
      this.marker.setLngLat(nextProps.coordinates);
    }
    if (!_isEqual(this.props.offset, nextProps.offset)) {
      this.removeMarker();
      this.addMarker(nextProps);
    }
    if (this.props.children !== nextProps.children) {
      this.renderChildren(nextProps);
    }
  };

  Marker.prototype.addMarker = function addMarker(props) {
    var _context = this.context,
        map = _context.map,
        mapboxgl = _context.mapboxgl;

    this.marker = new mapboxgl.Marker(this.el, { offset: props.offset });
    if (props.coordinates) {
      this.marker.setLngLat(props.coordinates);
    }
    this.marker.addTo(map);
  };

  Marker.prototype.removeMarker = function removeMarker() {
    this.marker.remove();
    this.marker = null;
  };

  Marker.prototype.renderChildren = function renderChildren(props) {
    if (this.component) {
      ReactDOM.unmountComponentAtNode(this.el);
    }
    this.component = ReactDOM.unstable_renderSubtreeIntoContainer(this, props.children, this.el);
  };

  Marker.prototype.render = function render() {
    return null;
  };

  return Marker;
}(React.Component), _class.propTypes = {
  coordinates: PropTypes.array,
  offset: PropTypes.array,
  children: PropTypes.node.isRequired
}, _class.defaultProps = {
  offset: [0, 0]
}, _class.contextTypes = {
  map: PropTypes.object,
  mapboxgl: PropTypes.object
}, _temp);


export default Marker;