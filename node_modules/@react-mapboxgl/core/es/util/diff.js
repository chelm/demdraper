import _isEqual from 'lodash/isEqual';
import _intersection from 'lodash/intersection';
import _difference from 'lodash/difference';
import _each from 'lodash/each';
import _keys from 'lodash/keys';
import _isPlainObject from 'lodash/isPlainObject';


/**
 * Produces a shallow diff of an object. Output is an array of
 * 'changes' where a change is either an 'add', 'remove', or 'update'.
 */
export default function diff(a, b) {
  // Throw is a or b are not objects.
  if (!_isPlainObject(a)) {
    throw new Error('First parameter to diff() is not an object');
  }
  if (!_isPlainObject(b)) {
    throw new Error('Second parameter to diff() is not an object');
  }

  var changes = [];
  var keysA = _keys(a);
  var keysB = _keys(b);

  // Find the items in A that are not in B.
  _each(_difference(keysA, keysB), function (key) {
    changes.push({ type: 'remove', key: key, value: a[key] });
  });

  // Find the items in B that are not in A.
  _each(_difference(keysB, keysA), function (key) {
    changes.push({ type: 'add', key: key, value: b[key] });
  });

  // Find the items that are in both, but have changed.
  _each(_intersection(keysA, keysB), function (key) {
    if (!_isEqual(a[key], b[key])) {
      changes.push({ type: 'update', key: key, value: b[key] });
    }
  });

  return changes;
}