import _omit from 'lodash/omit';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
var Image = (_temp = _class = function (_React$PureComponent) {
  _inherits(Image, _React$PureComponent);

  function Image() {
    _classCallCheck(this, Image);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Image.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    map.addImage(this.props.name, this.props.image, _omit(this.props, 'name', 'image'));
  };

  Image.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.context.map;

    map.removeImage(this.props.name);
  };

  Image.prototype.render = function render() {
    return null;
  };

  return Image;
}(React.PureComponent), _class.propTypes = {
  name: React.PropTypes.string,
  image: React.PropTypes.any // HTMLImageElement | ArrayBufferView
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default Image;