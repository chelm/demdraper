import _keys from 'lodash/keys';
import _pick from 'lodash/pick';
import _extend from 'lodash/extend';
import _isEqual from 'lodash/isEqual';

var _class, _temp2;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A minor clean-up of react-mapbox-gl/map.
 */
import React from 'react';
import PropTypes from 'prop-types';

import MapEvents from './MapEvents';
import MapOptions from './MapOptions';
import MapPosition from './MapPosition';
import MapInteraction from './MapInteraction';
import Children from './Children';

var MapGL = (_temp2 = _class = function (_React$Component) {
  _inherits(MapGL, _React$Component);

  function MapGL() {
    var _temp, _this, _ret;

    _classCallCheck(this, MapGL);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      unsupported: false,
      map: null
    }, _this.getChildContext = function () {
      return {
        map: _this.state.map
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MapGL.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !_isEqual(this.props, nextProps) || !_isEqual(this.state, nextState);
  };

  MapGL.prototype.componentDidMount = function componentDidMount() {
    var mapboxgl = this.context.mapboxgl;

    if (mapboxgl.supported()) {
      this.createMap();
    } else {
      this.setState({ unsupported: true });
    }
  };

  MapGL.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.state.map;

    this.unmounted = true;
    if (map) {
      map.off();
      // NOTE: We need to defer removing the map to after all
      // children have unmounted
      setImmediate(function () {
        map.remove();
      });
    }
  };

  MapGL.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.state.map;

    if (map && !_isEqual(this.props.containerStyle, nextProps.containerStyle)) {
      map.resize();
    }
  };

  MapGL.prototype.createMap = function createMap() {
    var _this2 = this;

    var mapboxgl = this.context.mapboxgl;

    // Build options from sub-components.

    var options = _extend({ container: this.container }, MapOptions.getOptions(this.props), MapPosition.getOptions(this.props), MapInteraction.getOptions(this.props));

    // Create map.
    var map = new mapboxgl.Map(options);

    // On map load, trigger events and set state.
    map.on('load', function () {
      if (!_this2.unmounted) {
        if (_this2.props.onLoad) {
          var _props;

          (_props = _this2.props).onLoad.apply(_props, arguments);
        }
        _this2.setState({ map: map });
      }
    });

    // Optionally handle style.load.
    if (this.props.onStyleLoad) {
      map.on('style.load', this.props.onStyleLoad);
    }

    return map;
  };

  MapGL.prototype.renderUnsupported = function renderUnsupported() {
    return this.props.renderUnsupported ? this.props.renderUnsupported() : React.createElement(
      'div',
      { className: 'unsupported' },
      'Your browser does not support WebGL-based maps.'
    );
  };

  MapGL.prototype.render = function render() {
    var _this3 = this;

    var _props2 = this.props,
        containerStyle = _props2.containerStyle,
        className = _props2.className;
    var _state = this.state,
        unsupported = _state.unsupported,
        map = _state.map;

    return React.createElement(
      'div',
      {
        ref: function ref(x) {
          _this3.container = x;
        },
        className: 'react-mapbox--container ' + (className || ''),
        style: containerStyle
      },
      unsupported ? this.renderUnsupported() : map ? React.createElement(
        Children,
        null,
        React.createElement(MapOptions, _pick(this.props, _keys(MapOptions.propTypes))),
        React.createElement(MapPosition, _pick(this.props, _keys(MapPosition.propTypes))),
        React.createElement(MapInteraction, _pick(this.props, _keys(MapInteraction.propTypes))),
        React.createElement(MapEvents, _pick(this.props, _keys(MapEvents.propTypes))),
        this.props.children
      ) : null
    );
  };

  return MapGL;
}(React.Component), _class.propTypes = {
  containerStyle: PropTypes.object,
  loadCSS: PropTypes.bool,
  renderUnsupported: PropTypes.func,
  onLoad: PropTypes.func,
  onStyleLoad: PropTypes.func
  // MapOptions
  // MapPosition
  // MapInteraction
  // MapEvents
}, _class.defaultProps = {
  loadCSS: true,
  containerStyle: {
    position: 'relative',
    width: '100%',
    paddingBottom: '50%'
  }
}, _class.contextTypes = {
  mapboxgl: PropTypes.object
}, _class.childContextTypes = {
  map: PropTypes.object
}, _temp2);


export default MapGL;