import _isEqual from 'lodash/isEqual';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
var LayerEvent = (_temp = _class = function (_React$PureComponent) {
  _inherits(LayerEvent, _React$PureComponent);

  function LayerEvent() {
    _classCallCheck(this, LayerEvent);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  LayerEvent.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    map.on(this.props.type, this.props.layer, this.props.onChange);
  };

  LayerEvent.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.context.map;

    map.off(this.props.type, this.props.layer, this.props.onChange);
  };

  LayerEvent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;

    if (_isEqual(this.props, nextProps)) {
      map.off(this.props.type, this.props.layer, this.props.onChange);
      map.on(nextProps.type, nextProps.layer, nextProps.onChange);
    }
  };

  LayerEvent.prototype.render = function render() {
    return null;
  };

  return LayerEvent;
}(React.PureComponent), _class.propTypes = {
  type: PropTypes.string.isRequired,
  layer: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default LayerEvent;