import _each from 'lodash/each';
import _keys from 'lodash/keys';
import _defaults from 'lodash/defaults';
import _pick from 'lodash/pick';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
var MapInteraction = (_temp = _class = function (_React$PureComponent) {
  _inherits(MapInteraction, _React$PureComponent);

  function MapInteraction() {
    _classCallCheck(this, MapInteraction);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  // Called when the map is initally created.
  MapInteraction.getOptions = function getOptions(props) {
    return _pick(_defaults({}, props, MapInteraction.defaultProps), _keys(MapInteraction.propTypes));
  };

  MapInteraction.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var map = this.context.map;

    var handlers = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate'];
    _each(handlers, function (handler) {
      if (_this2.props[handler] !== nextProps[handler]) {
        if (nextProps[handler]) {
          map[handler].enable();
        } else {
          map[handler].disable();
        }
      }
    });
  };

  MapInteraction.prototype.render = function render() {
    return null;
  };

  return MapInteraction;
}(React.PureComponent), _class.propTypes = {
  interactive: PropTypes.bool,
  scrollZoom: PropTypes.bool,
  boxZoom: PropTypes.bool,
  dragRotate: PropTypes.bool,
  dragPan: PropTypes.bool,
  keyboard: PropTypes.bool,
  doubleClickZoom: PropTypes.bool,
  touchZoomRotate: PropTypes.bool
}, _class.defaultProps = {
  interactive: true,
  scrollZoom: true,
  boxZoom: true,
  dragRotate: true,
  dragPan: true,
  keyboard: true,
  doubleClickZoom: true,
  touchZoomRotate: true
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default MapInteraction;