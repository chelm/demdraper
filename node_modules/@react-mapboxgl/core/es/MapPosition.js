import _extend from 'lodash/extend';
import _isUndefined from 'lodash/isUndefined';
import _isEqual from 'lodash/isEqual';
import _omit from 'lodash/omit';
import _keys from 'lodash/keys';
import _pick from 'lodash/pick';
import _defaults from 'lodash/defaults';

var _class, _temp;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
var MapPosition = (_temp = _class = function (_React$Component) {
  _inherits(MapPosition, _React$Component);

  function MapPosition() {
    _classCallCheck(this, MapPosition);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  // Called when the map is initally created.
  MapPosition.getOptions = function getOptions(props) {
    var pickFrom = _defaults({}, props, MapPosition.defaultProps);
    var picked = _pick(pickFrom, _keys(MapPosition.propTypes));
    return _omit(picked, ['bbox', 'padding', 'moveMethod', 'moveAround', 'moveAnimationOptions', 'moveFlyToOptions', 'positionRev']);
  };

  MapPosition.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !_isEqual(this.props, nextProps) || !_isEqual(this.state, nextState);
  };

  MapPosition.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    if (this.props.bbox) {
      map.fitBounds(this.props.bbox, {
        padding: this.props.padding || 0
      });
    }
  };

  MapPosition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;


    var didCenterUpdate = !_isEqual(this.props.center, nextProps.center);
    var didZoomUpdate = this.props.zoom !== nextProps.zoom;
    var didBearingUpdate = this.props.bearing !== nextProps.bearing;
    var didPitchUpdate = this.props.pitch !== nextProps.pitch;
    var cameraOptions = null;

    // Position props changed.
    if (didZoomUpdate || didCenterUpdate || didBearingUpdate || didPitchUpdate) {
      cameraOptions = {
        center: didCenterUpdate ? nextProps.center : map.getCenter(),
        zoom: didZoomUpdate ? nextProps.zoom : map.getZoom(),
        bearing: didBearingUpdate ? nextProps.bearing : map.getBearing(),
        pitch: didPitchUpdate ? nextProps.pitch : map.getPitch(),
        around: nextProps.moveAround
      };
    }

    // PositionRev changed.
    if (this.props.positionRev !== nextProps.positionRev) {
      cameraOptions = {
        center: !_isUndefined(nextProps.center) ? nextProps.center : map.getCenter(),
        zoom: !_isUndefined(nextProps.zoom) ? nextProps.zoom : map.getZoom(),
        bearing: !_isUndefined(nextProps.bearing) ? nextProps.bearing : map.getBearing(),
        pitch: !_isUndefined(nextProps.pitch) ? nextProps.pitch : map.getPitch(),
        around: nextProps.moveAround
      };
    }

    if (cameraOptions) {
      map[nextProps.moveMethod](_extend(cameraOptions, nextProps.moveMethod !== 'jumpTo' ? nextProps.moveAnimationOptions : null, nextProps.moveMethod === 'flyTo' ? nextProps.moveFlyToOptions : null));
    }

    if (!_isEqual(this.props.bbox, nextProps.bbox)) {
      map.fitBounds(nextProps.bbox, {
        padding: nextProps.padding || 0,
        linear: nextProps.moveMethod !== 'flyTo'
      });
    }
  };

  MapPosition.prototype.render = function render() {
    return null;
  };

  return MapPosition;
}(React.Component), _class.propTypes = {
  // Map position options.
  center: PropTypes.arrayOf(PropTypes.number),
  zoom: PropTypes.number,
  minZoom: PropTypes.number,
  maxZoom: PropTypes.number,
  maxBounds: PropTypes.array,
  bearing: PropTypes.number,
  pitch: PropTypes.number,

  // Custom position options.
  bbox: PropTypes.oneOfType([PropTypes.array, PropTypes.object]),
  padding: PropTypes.oneOfType([PropTypes.number, PropTypes.object]),
  moveMethod: PropTypes.oneOf(['jumpTo', 'easeTo', 'flyTo']),
  moveAround: PropTypes.array,
  moveAnimationOptions: PropTypes.object,
  moveFlyToOptions: PropTypes.object,

  // The positionRev provies a way to 'hard reset' the map
  // position. For example, if you want to reset the position to the
  // original props values (without changing the props values). An easy
  // way to use this would be to set it to a timestamp.
  positionRev: PropTypes.number
}, _class.defaultProps = {
  // Default map options.
  center: [-0.2416815, 51.5285582],
  zoom: 11,
  minZoom: 0,
  maxZoom: 20,
  bearing: 0,
  pitch: 0,

  // Default custom options.
  moveMethod: 'flyTo',
  moveAnimationOptions: {},
  moveFlyToOptions: {},
  positionRev: 0
}, _class.contextTypes = {
  map: PropTypes.object
}, _temp);


export default MapPosition;