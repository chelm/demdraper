'use strict';

exports.__esModule = true;

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _isUndefined2 = require('lodash/isUndefined');

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MapPosition = (_temp = _class = function (_React$Component) {
  _inherits(MapPosition, _React$Component);

  function MapPosition() {
    _classCallCheck(this, MapPosition);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  // Called when the map is initally created.
  MapPosition.getOptions = function getOptions(props) {
    var pickFrom = (0, _defaults3.default)({}, props, MapPosition.defaultProps);
    var picked = (0, _pick3.default)(pickFrom, (0, _keys3.default)(MapPosition.propTypes));
    return (0, _omit3.default)(picked, ['bbox', 'padding', 'moveMethod', 'moveAround', 'moveAnimationOptions', 'moveFlyToOptions', 'positionRev']);
  };

  MapPosition.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !(0, _isEqual3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);
  };

  MapPosition.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    if (this.props.bbox) {
      map.fitBounds(this.props.bbox, {
        padding: this.props.padding || 0
      });
    }
  };

  MapPosition.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;


    var didCenterUpdate = !(0, _isEqual3.default)(this.props.center, nextProps.center);
    var didZoomUpdate = this.props.zoom !== nextProps.zoom;
    var didBearingUpdate = this.props.bearing !== nextProps.bearing;
    var didPitchUpdate = this.props.pitch !== nextProps.pitch;
    var cameraOptions = null;

    // Position props changed.
    if (didZoomUpdate || didCenterUpdate || didBearingUpdate || didPitchUpdate) {
      cameraOptions = {
        center: didCenterUpdate ? nextProps.center : map.getCenter(),
        zoom: didZoomUpdate ? nextProps.zoom : map.getZoom(),
        bearing: didBearingUpdate ? nextProps.bearing : map.getBearing(),
        pitch: didPitchUpdate ? nextProps.pitch : map.getPitch(),
        around: nextProps.moveAround
      };
    }

    // PositionRev changed.
    if (this.props.positionRev !== nextProps.positionRev) {
      cameraOptions = {
        center: !(0, _isUndefined3.default)(nextProps.center) ? nextProps.center : map.getCenter(),
        zoom: !(0, _isUndefined3.default)(nextProps.zoom) ? nextProps.zoom : map.getZoom(),
        bearing: !(0, _isUndefined3.default)(nextProps.bearing) ? nextProps.bearing : map.getBearing(),
        pitch: !(0, _isUndefined3.default)(nextProps.pitch) ? nextProps.pitch : map.getPitch(),
        around: nextProps.moveAround
      };
    }

    if (cameraOptions) {
      map[nextProps.moveMethod]((0, _extend3.default)(cameraOptions, nextProps.moveMethod !== 'jumpTo' ? nextProps.moveAnimationOptions : null, nextProps.moveMethod === 'flyTo' ? nextProps.moveFlyToOptions : null));
    }

    if (!(0, _isEqual3.default)(this.props.bbox, nextProps.bbox)) {
      map.fitBounds(nextProps.bbox, {
        padding: nextProps.padding || 0,
        linear: nextProps.moveMethod !== 'flyTo'
      });
    }
  };

  MapPosition.prototype.render = function render() {
    return null;
  };

  return MapPosition;
}(_react2.default.Component), _class.propTypes = {
  // Map position options.
  center: _propTypes2.default.arrayOf(_propTypes2.default.number),
  zoom: _propTypes2.default.number,
  minZoom: _propTypes2.default.number,
  maxZoom: _propTypes2.default.number,
  maxBounds: _propTypes2.default.array,
  bearing: _propTypes2.default.number,
  pitch: _propTypes2.default.number,

  // Custom position options.
  bbox: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object]),
  padding: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.object]),
  moveMethod: _propTypes2.default.oneOf(['jumpTo', 'easeTo', 'flyTo']),
  moveAround: _propTypes2.default.array,
  moveAnimationOptions: _propTypes2.default.object,
  moveFlyToOptions: _propTypes2.default.object,

  // The positionRev provies a way to 'hard reset' the map
  // position. For example, if you want to reset the position to the
  // original props values (without changing the props values). An easy
  // way to use this would be to set it to a timestamp.
  positionRev: _propTypes2.default.number
}, _class.defaultProps = {
  // Default map options.
  center: [-0.2416815, 51.5285582],
  zoom: 11,
  minZoom: 0,
  maxZoom: 20,
  bearing: 0,
  pitch: 0,

  // Default custom options.
  moveMethod: 'flyTo',
  moveAnimationOptions: {},
  moveFlyToOptions: {},
  positionRev: 0
}, _class.contextTypes = {
  map: _propTypes2.default.object
}, _temp);
exports.default = MapPosition;