'use strict';

exports.__esModule = true;

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Source = (_temp = _class = function (_React$Component) {
  _inherits(Source, _React$Component);

  function Source() {
    _classCallCheck(this, Source);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Source.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !(0, _isEqual3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);
  };

  Source.prototype.componentDidMount = function componentDidMount() {
    this.addSource(this.props);
  };

  Source.prototype.componentWillUnmount = function componentWillUnmount() {
    this.removeSource(this.props);
  };

  Source.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;

    // If any of these props change, we have to just recreate the
    // source from scratch.

    var invalidate = ['type', 'url', 'tiles', 'tileSize', 'minzoom', 'maxzoom', 'buffer', 'tolerance', 'cluster', 'clusterRadius', 'clusterMaxZoom', 'canvas', 'animate'];
    if (!(0, _isEqual3.default)((0, _pick3.default)(this.props, invalidate), (0, _pick3.default)(nextProps, invalidate))) {
      this.removeSource(this.props.id);
      this.addSource(nextProps);
      return;
    }

    // The coordinates changed.
    if (!(0, _isEqual3.default)(this.props.coordinates, nextProps.coordinates)) {
      map.getSource(nextProps.id).setCoordinates(nextProps.coordinates);
    }

    // The data changed.
    if (!(0, _isEqual3.default)(this.props.data, nextProps.data)) {
      map.getSource(nextProps.id).setData(nextProps.data);
    }

    // The dataRev changed (perhaps a timestamp). Use this to 'refresh'
    // an external geojson source.
    if (this.props.dataRev !== nextProps.dataRev) {
      map.getSource(nextProps.id).setData(nextProps.data);
    }
  };

  Source.prototype.addSource = function addSource(props) {
    var map = this.context.map;

    var options = {};

    // Grab basic options from props.
    (0, _extend3.default)(options, (0, _omitBy3.default)((0, _pick3.default)(props, ['type', 'data', 'url', 'tiles', 'tileSize', 'minzoom', 'maxzoom', 'coordinates', 'buffer', 'tolerance', 'cluster', 'clusterRadius', 'clusterMaxZoom', 'canvas', 'animate']), _isNil3.default));

    // Add the source.
    map.addSource(props.id, options);
    map.fire('_addSource', this.props.id);
  };

  Source.prototype.removeSource = function removeSource(props) {
    var map = this.context.map;

    map.removeSource(props.id);
    map.fire('_removeSource', props.id);
  };

  Source.prototype.render = function render() {
    return null;
  };

  return Source;
}(_react2.default.Component), _class.propTypes = {
  id: _propTypes2.default.string.isRequired,
  type: _propTypes2.default.oneOf(['canvas', 'geojson', 'image', 'raster', 'vector', 'video']).isRequired,
  data: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]),
  dataRev: _propTypes2.default.number,
  url: _propTypes2.default.string,
  tiles: _propTypes2.default.array,
  tileSize: _propTypes2.default.number,
  minzoom: _propTypes2.default.number,
  maxzoom: _propTypes2.default.number,
  coordinates: _propTypes2.default.array,
  buffer: _propTypes2.default.number,
  tolerance: _propTypes2.default.number,
  cluster: _propTypes2.default.bool,
  clusterRadius: _propTypes2.default.number,
  clusterMaxZoom: _propTypes2.default.number,
  canvas: _propTypes2.default.string,
  animate: _propTypes2.default.bool
}, _class.contextTypes = {
  map: _propTypes2.default.object
}, _temp);
exports.default = Source;