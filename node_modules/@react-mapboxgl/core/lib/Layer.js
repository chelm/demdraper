'use strict';

exports.__esModule = true;

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _diff = require('./util/diff');

var _diff2 = _interopRequireDefault(_diff);

var _Source = require('./Source');

var _Source2 = _interopRequireDefault(_Source);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Layer = (_temp = _class = function (_React$Component) {
  _inherits(Layer, _React$Component);

  function Layer() {
    _classCallCheck(this, Layer);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Layer.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !(0, _isEqual3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);
  };

  Layer.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    var options = {};

    // Grab basic options from props.
    (0, _extend3.default)(options, (0, _omitBy3.default)((0, _pick3.default)(this.props, ['id', 'type', 'metadata', 'minzoom', 'maxzoom', 'filter', 'layout', 'paint']), _isNil3.default));

    // Grab 'ref' from 'copy'.
    if (this.props.copy) {
      options.ref = this.props.copy;
    }

    // Check if we have a source id or object.
    if ((0, _isPlainObject3.default)(this.props.source)) {
      options.source = this.props.source.id || this.props.id + '-source';
    } else {
      options.source = this.props.source;
    }
    if (this.props.sourceLayer) {
      options['source-layer'] = this.props.sourceLayer;
    }

    // Add the layer to the map.
    map.addLayer(options, this.props.before);
    map.fire('_addLayer', this.props.id);
  };

  Layer.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.context.map;

    map.removeLayer(this.props.id);
    map.fire('_removeLayer', this.props.id);
  };

  Layer.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var map = this.context.map;


    if (!(0, _isEqual3.default)(this.props.filter, nextProps.filter)) {
      map.setFilter(this.props.id, nextProps.filter);
    }

    (0, _each3.default)((0, _diff2.default)(this.props.layout || {}, nextProps.layout || {}), function (_ref) {
      var type = _ref.type,
          key = _ref.key,
          value = _ref.value;

      map.setLayoutProperty(_this2.props.id, key, type === 'remove' ? null : value);
    });

    (0, _each3.default)((0, _diff2.default)(this.props.paint || {}, nextProps.paint || {}), function (_ref2) {
      var type = _ref2.type,
          key = _ref2.key,
          value = _ref2.value;

      map.setPaintProperty(_this2.props.id, key, type === 'remove' ? null : value);
    });

    if (this.props.before !== nextProps.before) {
      map.moveLayer(this.props.id, nextProps.before);
    }

    if (this.props.minZoom !== nextProps.minZoom || this.props.maxZoom !== nextProps.maxZoom) {
      map.setLayerZoomRange(this.props.id, nextProps.minZoom, nextProps.maxZoom);
    }
  };

  Layer.prototype.render = function render() {
    // Render our source, or nothing.
    return (0, _isPlainObject3.default)(this.props.source) ? _react2.default.createElement(_Source2.default, _extends({ id: this.props.id + '-source' }, this.props.source)) : null;
  };

  return Layer;
}(_react2.default.Component), _class.propTypes = {
  id: _propTypes2.default.string.isRequired,
  type: _propTypes2.default.oneOf(['fill', 'line', 'symbol', 'circle', 'fill-extrusion', 'raster', 'background']).isRequired,
  source: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  sourceLayer: _propTypes2.default.string,
  metadata: _propTypes2.default.object,
  copy: _propTypes2.default.string,
  minzoom: _propTypes2.default.number,
  maxzoom: _propTypes2.default.number,
  filter: _propTypes2.default.array,
  layout: _propTypes2.default.object,
  paint: _propTypes2.default.object,
  before: _propTypes2.default.string
}, _class.contextTypes = {
  map: _propTypes2.default.object
}, _temp);
exports.default = Layer;