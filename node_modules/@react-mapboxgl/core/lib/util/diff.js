'use strict';

exports.__esModule = true;

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _intersection2 = require('lodash/intersection');

var _intersection3 = _interopRequireDefault(_intersection2);

var _difference2 = require('lodash/difference');

var _difference3 = _interopRequireDefault(_difference2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _isPlainObject2 = require('lodash/isPlainObject');

var _isPlainObject3 = _interopRequireDefault(_isPlainObject2);

exports.default = diff;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Produces a shallow diff of an object. Output is an array of
 * 'changes' where a change is either an 'add', 'remove', or 'update'.
 */
function diff(a, b) {
  // Throw is a or b are not objects.
  if (!(0, _isPlainObject3.default)(a)) {
    throw new Error('First parameter to diff() is not an object');
  }
  if (!(0, _isPlainObject3.default)(b)) {
    throw new Error('Second parameter to diff() is not an object');
  }

  var changes = [];
  var keysA = (0, _keys3.default)(a);
  var keysB = (0, _keys3.default)(b);

  // Find the items in A that are not in B.
  (0, _each3.default)((0, _difference3.default)(keysA, keysB), function (key) {
    changes.push({ type: 'remove', key: key, value: a[key] });
  });

  // Find the items in B that are not in A.
  (0, _each3.default)((0, _difference3.default)(keysB, keysA), function (key) {
    changes.push({ type: 'add', key: key, value: b[key] });
  });

  // Find the items that are in both, but have changed.
  (0, _each3.default)((0, _intersection3.default)(keysA, keysB), function (key) {
    if (!(0, _isEqual3.default)(a[key], b[key])) {
      changes.push({ type: 'update', key: key, value: b[key] });
    }
  });

  return changes;
}