'use strict';

exports.__esModule = true;

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MapOptions = (_temp = _class = function (_React$PureComponent) {
  _inherits(MapOptions, _React$PureComponent);

  function MapOptions() {
    _classCallCheck(this, MapOptions);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  // Called when the map is initally created.
  MapOptions.getOptions = function getOptions(props) {
    return (0, _omit3.default)((0, _pick3.default)(props, (0, _keys3.default)(MapOptions.propTypes)), ['showTileBoundaries', 'showCollisionBoxes', 'repaint', 'rtlTextPlugin']);
  };

  MapOptions.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;

    if (!(0, _isEqual3.default)(this.props.style, nextProps.style)) {
      map.setStyle(nextProps.style);
    }
    if (this.props.showTileBoundaries !== nextProps.showTileBoundaries) {
      map.showTileBoundaries(nextProps.showTileBoundaries);
    }
    if (this.props.showCollisionBoxes !== nextProps.showCollisionBoxes) {
      map.showCollisionBoxes(nextProps.showCollisionBoxes);
    }
    if (this.props.repaint !== nextProps.repaint) {
      map.repaint(nextProps.repaint);
    }
    if (this.props.rtlTextPlugin !== nextProps.rtlTextPlugin) {
      map.setRTLTextPlugin(nextProps.rtlTextPlugin);
    }
  };

  MapOptions.prototype.render = function render() {
    return null;
  };

  return MapOptions;
}(_react2.default.PureComponent), _class.propTypes = {
  style: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired,
  hash: _propTypes2.default.bool,
  bearingSnap: _propTypes2.default.number,
  attributionControl: _propTypes2.default.bool,
  logoPosition: _propTypes2.default.string,
  preserveDrawingBuffer: _propTypes2.default.bool,
  refreshExpiredTiles: _propTypes2.default.bool,
  trackResize: _propTypes2.default.bool,
  renderWorldCopies: _propTypes2.default.bool,

  // Not options, set with a method.
  showTileBoundaries: _propTypes2.default.bool,
  showCollisionBoxes: _propTypes2.default.bool,
  repaint: _propTypes2.default.bool,
  rtlTextPlugin: _propTypes2.default.string
}, _class.contextTypes = {
  map: _propTypes2.default.object
}, _temp);
exports.default = MapOptions;