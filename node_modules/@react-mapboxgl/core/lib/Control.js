'use strict';

exports.__esModule = true;

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Control = (_temp = _class = function (_React$PureComponent) {
  _inherits(Control, _React$PureComponent);

  function Control() {
    _classCallCheck(this, Control);

    return _possibleConstructorReturn(this, _React$PureComponent.apply(this, arguments));
  }

  Control.prototype.createControl = function createControl(props) {
    var mapboxgl = this.context.mapboxgl;

    var ControlClass = typeof props.type === 'string' ? mapboxgl[props.type + 'Control'] : props.type;
    var options = (0, _omit3.default)(props, 'type', 'position');

    return new ControlClass(options);
  };

  Control.prototype.componentDidMount = function componentDidMount() {
    var map = this.context.map;

    this.control = this.createControl(this.props);
    map.addControl(this.control, this.props.position);
  };

  Control.prototype.componentWillUnmount = function componentWillUnmount() {
    var map = this.context.map;

    map.removeControl(this.control);
  };

  Control.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var map = this.context.map;

    if (!(0, _isEqual3.default)(this.props, nextProps)) {
      map.removeControl(this.control);
      this.control = this.createControl(nextProps);
      map.addControl(this.control, nextProps.position);
    }
  };

  Control.prototype.render = function render() {
    return null;
  };

  return Control;
}(_react2.default.PureComponent), _class.propTypes = {
  type: _propTypes2.default.oneOfType([_propTypes2.default.oneOf(['Navigation', 'Geolocate', 'Attribution', 'Scale', 'Fullscreen']), _propTypes2.default.object, _propTypes2.default.func]).isRequired,
  position: _propTypes2.default.string
}, _class.defaultProps = {
  position: 'top-right'
}, _class.contextTypes = {
  map: _propTypes2.default.object,
  mapboxgl: _propTypes2.default.object
}, _temp);
exports.default = Control;