'use strict';

exports.__esModule = true;

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _omitBy2 = require('lodash/omitBy');

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Open a mapbox-gl 'native' popup.
 *
 * Note: It's usually not going to be a good idea to use the `closeButton` or
 * `closeOnClick` options, because they can conflict with the mounted state of
 * your popup. You should instead 'close' your own <Popup> component by simply
 * unrendering it. If you want a close button, it would be better to render and
 * manage it yourself (tied to some state that controls the rendering of the
 * Popup).
 */
var Popup = (_temp = _class = function (_React$Component) {
  _inherits(Popup, _React$Component);

  function Popup() {
    _classCallCheck(this, Popup);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Popup.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !(0, _isEqual3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);
  };

  Popup.prototype.componentDidMount = function componentDidMount() {
    // Setup popup div.
    this.el = document.createElement('div');
    this.el.className = 'react-mapbox--popup';
    (0, _extend3.default)(this.el.style, {
      position: 'relative',
      display: 'inline-block'
    });

    // Add popup to map.
    this.addPopup(this.props);
  };

  Popup.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.component) {
      _reactDom2.default.unmountComponentAtNode(this.el);
      this.component = null;
    }
    this.removePopup();
    this.el = null;
  };

  Popup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    // For options or content, we need to make a new popup.
    if (!(0, _isEqual3.default)(this.getOptions(this.props), this.getOptions(nextProps)) || !(0, _isEqual3.default)(this.props.html, nextProps.html) || !(0, _isEqual3.default)(this.props.text, nextProps.text) || !(0, _isEqual3.default)(this.props.onClose, nextProps.onClose)) {
      this.removePopup();
      this.addPopup(nextProps);
      return;
    }

    // Otherwise update the current popup.
    if (!(0, _isEqual3.default)(this.props.coordinates, nextProps.coordinates)) {
      this.popup.setLngLat(nextProps.coordinates);
    }
    if (this.props.children !== nextProps.children) {
      this.renderChildren(nextProps);
    }
  };

  Popup.prototype.getOptions = function getOptions(props) {
    return (0, _omitBy3.default)((0, _pick3.default)(props, ['closeButton', 'closeOnClick', 'anchor', 'offset']), _isNil3.default);
  };

  Popup.prototype.addPopup = function addPopup(props) {
    var _context = this.context,
        map = _context.map,
        mapboxgl = _context.mapboxgl;

    this.popup = new mapboxgl.Popup(this.getOptions(props));
    if (this.props.onClose) {
      this.popup.on('close', this.props.onClose);
    }
    if (props.coordinates) {
      this.popup.setLngLat(props.coordinates);
    }
    if (props.html) {
      this.popup.setHTML(props.html);
    }
    if (props.text) {
      this.popup.setText(props.text);
    }
    if (props.children) {
      this.renderChildren(props);
      this.popup.setDOMContent(this.el);
    }
    this.popup.addTo(map);
  };

  Popup.prototype.removePopup = function removePopup() {
    if (this.popup.isOpen()) {
      this.popup.off('close');
      this.popup.remove();
    }
    this.popup = null;
  };

  Popup.prototype.renderChildren = function renderChildren(props) {
    if (this.component) {
      _reactDom2.default.unmountComponentAtNode(this.el);
    }
    if (props.children) {
      this.component = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, props.children, this.el);
    }
  };

  Popup.prototype.render = function render() {
    return null;
  };

  return Popup;
}(_react2.default.Component), _class.propTypes = {
  // Popup options.
  closeButton: _propTypes2.default.bool,
  closeOnClick: _propTypes2.default.bool,
  anchor: _propTypes2.default.string,
  offset: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array, _propTypes2.default.object]),

  // Coordinates.
  coordinates: _propTypes2.default.array,

  // Only one of the following.
  text: _propTypes2.default.string,
  html: _propTypes2.default.string,
  children: _propTypes2.default.node,

  // Events.
  onClose: _propTypes2.default.func
}, _class.defaultProps = {
  closeButton: false,
  closeOnClick: false
}, _class.contextTypes = {
  map: _propTypes2.default.object,
  mapboxgl: _propTypes2.default.object
}, _temp);
exports.default = Popup;