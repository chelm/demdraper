'use strict';

exports.__esModule = true;

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Marker = (_temp = _class = function (_React$Component) {
  _inherits(Marker, _React$Component);

  function Marker() {
    _classCallCheck(this, Marker);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Marker.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    return !(0, _isEqual3.default)(this.props, nextProps) || !(0, _isEqual3.default)(this.state, nextState);
  };

  Marker.prototype.componentDidMount = function componentDidMount() {
    // Setup marker div.
    this.el = document.createElement('div');
    this.el.className = 'react-mapbox--marker';
    (0, _extend3.default)(this.el.style, {
      position: 'relative',
      width: 0,
      height: 0,
      overflow: 'visible'
    });

    // Render children.
    this.renderChildren(this.props);

    // Add marker to map.
    this.addMarker(this.props);
  };

  Marker.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.component) {
      _reactDom2.default.unmountComponentAtNode(this.el);
      this.component = null;
    }
    this.marker.remove();
    this.el = null;
  };

  Marker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!(0, _isEqual3.default)(this.props.coordinates, nextProps.coordinates)) {
      this.marker.setLngLat(nextProps.coordinates);
    }
    if (!(0, _isEqual3.default)(this.props.offset, nextProps.offset)) {
      this.removeMarker();
      this.addMarker(nextProps);
    }
    if (this.props.children !== nextProps.children) {
      this.renderChildren(nextProps);
    }
  };

  Marker.prototype.addMarker = function addMarker(props) {
    var _context = this.context,
        map = _context.map,
        mapboxgl = _context.mapboxgl;

    this.marker = new mapboxgl.Marker(this.el, { offset: props.offset });
    if (props.coordinates) {
      this.marker.setLngLat(props.coordinates);
    }
    this.marker.addTo(map);
  };

  Marker.prototype.removeMarker = function removeMarker() {
    this.marker.remove();
    this.marker = null;
  };

  Marker.prototype.renderChildren = function renderChildren(props) {
    if (this.component) {
      _reactDom2.default.unmountComponentAtNode(this.el);
    }
    this.component = _reactDom2.default.unstable_renderSubtreeIntoContainer(this, props.children, this.el);
  };

  Marker.prototype.render = function render() {
    return null;
  };

  return Marker;
}(_react2.default.Component), _class.propTypes = {
  coordinates: _propTypes2.default.array,
  offset: _propTypes2.default.array,
  children: _propTypes2.default.node.isRequired
}, _class.defaultProps = {
  offset: [0, 0]
}, _class.contextTypes = {
  map: _propTypes2.default.object,
  mapboxgl: _propTypes2.default.object
}, _temp);
exports.default = Marker;