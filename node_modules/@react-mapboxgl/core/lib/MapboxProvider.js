'use strict';

exports.__esModule = true;

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _loadCSS = require('./util/loadCSS');

var _loadCSS2 = _interopRequireDefault(_loadCSS);

var _loadScript = require('./util/loadScript');

var _loadScript2 = _interopRequireDefault(_loadScript);

var _package = require('../package.json');

var _package2 = _interopRequireDefault(_package);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MapboxProvider = (_temp2 = _class = function (_React$PureComponent) {
  _inherits(MapboxProvider, _React$PureComponent);

  function MapboxProvider() {
    var _temp, _this, _ret;

    _classCallCheck(this, MapboxProvider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args))), _this), _this.state = {
      mapboxgl: null
    }, _this.getChildContext = function () {
      return {
        mapboxgl: _this.state.mapboxgl
      };
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MapboxProvider.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var accessToken = this.props.accessToken;

    this.loadMapboxGL().then(function (mapboxgl) {
      if (!_this2.unmounted) {
        mapboxgl.accessToken = accessToken;
        _this2.setState({ mapboxgl: mapboxgl });
      }
    }).catch(function (err) {
      throw err;
    });
  };

  MapboxProvider.prototype.componentWillUnount = function componentWillUnount() {
    this.unmounted = false;
  };

  MapboxProvider.prototype.loadMapboxGL = function loadMapboxGL() {
    var _props = this.props,
        mapboxgl = _props.mapboxgl,
        js = _props.js,
        css = _props.css,
        version = _props.version,
        cdn = _props.cdn;

    return new Promise(function (resolve, reject) {
      if (mapboxgl) {
        resolve(mapboxgl);
      } else if (window && window.mapboxgl) {
        resolve(window.mapboxgl);
      } else if (window) {
        Promise.all([js ? (0, _loadScript2.default)(cdn + '/v' + version + '/mapbox-gl.js') : Promise.resolve(), css ? (0, _loadCSS2.default)(cdn + '/v' + version + '/mapbox-gl.css') : Promise.resolve()]).then(function () {
          resolve(window.mapboxgl);
        }).catch(function (err) {
          reject(err);
        });
      } else {
        reject(new Error('Cannot load mapbox in a non-browser environment'));
      }
    });
  };

  MapboxProvider.prototype.render = function render() {
    return this.state.mapboxgl ? this.props.children : null;
  };

  return MapboxProvider;
}(_react2.default.PureComponent), _class.propTypes = {
  // We need an access token.
  accessToken: _propTypes2.default.string.isRequired,

  // Either pass in the mapbox-gl module ...
  // ... or we'll try to grab mapboxgl from the window ...
  // ... or we'll load the js/css from mapbox's CDN.
  mapboxgl: _propTypes2.default.object,
  js: _propTypes2.default.bool,
  css: _propTypes2.default.bool,
  cdn: _propTypes2.default.string,
  version: _propTypes2.default.string
}, _class.defaultProps = {
  js: true,
  css: true,
  cdn: 'https://api.mapbox.com/mapbox-gl-js',
  version: _package2.default.devDependencies['mapbox-gl'].slice(1)
}, _class.childContextTypes = {
  mapboxgl: _propTypes2.default.object
}, _temp2);
exports.default = MapboxProvider;